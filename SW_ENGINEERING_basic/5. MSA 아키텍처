**MSA 아키텍처**
    - 모놀리식에서 문제의 원인이었던 서비스들간의 의존성이 약화되거나 제거돼 느슨한 결합(loosely coupied) 상태로 구성
    - 서비스는 저마다 데이터베이스를 가지며, 각 서비스마다 더 적합한 기술이 사용
    - 서비스의 수정이 발생하여도 다른 서비스로의 영향이 없거나 적기 때문에, 독립적인 개발 및 배포가 가능
    - 장애가 발생하더라도 장애 범위가 서비스에만 국한
    - 특정 이벤트로 대량의 트래픽이 몰릴 경우, 해당 서비스에만 컴퓨팅 리소스를 더 투입하는 **스케일 아웃 전략**을 사용
        - 스케일 아웃 : 횡으로 서버를 추가하는 방법
        - 스케일 업 : 서버의 성능을 높이는 방법

**MSA 통신방식**
    - API 기반 통신(동기적 통신)
        - Application Programming Interface
        - **소프트웨어나 시스템 간의 상호작용을 가능하게 하는 규약 또는 인터페이스**
        - 즉, 소프트웨어 컴포넌트 간의 ‘연결고리’ 역할을 하며, 사용자들이 복잡한 코드를 직접 작성하지 않고도 특정 기능에 대한 정보를 받거나 구현하는데 도움
            - EX) **한국거래소 API를 통해 주식시세 받기, 두나무 API를 통해 코인 시세 받기**, 윈도우 API를 통해 쉽게 폴더생성 및 파일 생성, java API를 통해 쉽게 문자열처리 등
        - API 기반 통신은 주로 동기적 처리를 위한 용도
            - EX) 주문서비스에서 회원정보가 필요할 때, 회원 ID를 가지고 회원 서비스를 호출하여 정보를 조회
    - 이벤트 기반 통신(비동기)
        - 비동기 또는 독립적 처리를 위한 용도
        - 주문이 발생하면(신규 주문 이벤트가 발생하면) 주문 정보를 가진 메시지를 발행하고, 재고 서비스나 앱 푸시 서비스에서 해당 메시지를 구독하여 후속 처리

**MSA와 컨테이너 환경구성**
    - msa는 경량화된 아키텍처로서 분산 아키텍처로 구성
        - 경량화된 서버인 docker container와 같은 컨테이너 기반 아키텍처에 적합
        - 확장가능성에 염두를 둔 msa 설계사상과 확장에 유연하고 용이한 이미지 기반의 컨테이너 서버 구성은 상호 적합한 기술 선택지
        - 쿠버네티스(k8s)와 같은 컨테이너 오케스트레이션 기술 덕분에 대규모 컨테이너 시스템을 기존의 legacy보다 효율적으로 관리할 수 있는점이 큰 장점
        
    - k8s의 활용
        - 자동화된 배포와 롤아웃 관리를 통해 msa 환경에서의 빈번한 수정과 배포 가능
        - 자동 확장과 로드 밸런싱
            - 특정 서비스의 고 트래픽 상황시 빠른 자동확장 서비스와 로드밸런싱
        - 서비스 검색과 네트워킹을 통한 내부 통신 용이
            - 내부 서비스간의 통신 용이와 확장성이 하게 함으로서 msa 컨테이너간의 통신에 최적화
        - 자원 관리 및 최적화
        - 서비스 health check 자동관리
            - 특정 컨테이너가 down된 상황을 자동으로 인지하고 컨테이너 재생성 또는 서비스 자동 재시작 기능